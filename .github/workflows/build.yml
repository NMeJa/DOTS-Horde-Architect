name: Unity Build and Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  # Manual trigger option
  workflow_dispatch:
    inputs:
      runTests:
        description: 'Run Unity tests'
        required: true
        default: false
        type: boolean

      buildWindows:
        description: 'Build Windows version'
        required: true
        default: false
        type: boolean
      deployWindows:
        description: 'Deploy Windows version to release'
        required: true
        default: false
        type: boolean

      buildWebGL:
        description: 'Build WebGL version'
        required: true
        default: true
        type: boolean
      deployWebGL:
        description: 'Deploy WebGL version to GitHub Pages'
        required: true
        default: false
        type: boolean

jobs:
  # Check if required secrets are set
  verify-secrets:
    name: Verify Unity Secrets
    runs-on: ubuntu-latest
    outputs:
      buildWindows: ${{ steps.set-build-flags.outputs.buildWindows }}
      buildWebGL: ${{ steps.set-build-flags.outputs.buildWebGL }}
    steps:
      - name: Check for Unity license
        run: |
          if [[ -z "${{ secrets.UNITY_LICENSE }}" && -z "${{ secrets.UNITY_EMAIL }}" && -z "${{ secrets.UNITY_PASSWORD }}" ]]; then
            echo "::error::Unity license secrets are not set. Please set UNITY_LICENSE or both UNITY_EMAIL and UNITY_PASSWORD."
            exit 1
          fi
          echo "âœ… Unity secrets are properly configured"

      - name: Set build flags
        id: set-build-flags
        run: |
          # Default values if not manually triggered
          BUILD_WINDOWS="true"
          BUILD_WEBGL="true"
          
          # If workflow dispatch, use the provided inputs
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            BUILD_WINDOWS="${{ github.event.inputs.buildWindows }}"
            BUILD_WEBGL="${{ github.event.inputs.buildWebGL }}"
          fi
          
          echo "buildWindows=$BUILD_WINDOWS" >> $GITHUB_OUTPUT
          echo "buildWebGL=$BUILD_WEBGL" >> $GITHUB_OUTPUT

  # Run tests only if explicitly enabled
  test:
    name: Unity Tests
    needs: [ verify-secrets ]
    if: github.event.inputs.runTests == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - uses: actions/cache@v3
        with:
          path: Library/Bee
          key: Library-test-minimal
          restore-keys: Library-test-minimal

      - uses: game-ci/unity-test-runner@v4
        id: tests
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          testMode: all
          customParameters: '-nographics -batchmode -disable-gpu'

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Test-Results
          path: artifacts/

  # Build for Windows
#  build-windows:
#    name: Build Windows
#    needs: [ verify-secrets, test ]
#    # Only run if Windows build is enabled and tests pass (if tests are running)
#    if: needs.verify-secrets.outputs.buildWindows == 'true' && (github.event.inputs.runTests != 'true' || needs.test.result == 'success')
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#          lfs: true
#
#      - name: Free Disk Space
#        uses: jlumbroso/free-disk-space@main
#        with:
#          tool-cache: true
#          android: true
#          dotnet: true
#          haskell: true
#          large-packages: true
#          docker-images: true
#          swap-storage: true
#
#      - name: Check Available Disk Space
#        run: |
#          echo "Available disk space:"
#          df -h
#
#      - name: Cache Library folder
#        uses: actions/cache@v3
#        with:
#          path: Library/Bee
#          key: Library-Windows-minimal
#          restore-keys: Library-Windows-minimal
#
#      - name: Build Windows
#        uses: game-ci/unity-builder@v4
#        env:
#          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
#          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
#          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
#        with:
#          targetPlatform: StandaloneWindows64
#          customParameters: '-nographics -batchmode -disable-gpu'
#
#      - name: Upload Windows Build
#        uses: actions/upload-artifact@v4
#        with:
#          name: Build-Windows
#          path: build/StandaloneWindows64
#          retention-days: 3
#
#      - name: Clean up after build
#        run: |
#          rm -rf Library/PackageCache || true
#          rm -rf Library/Artifacts || true
#          rm -rf Library/BuildCache || true
#
#  # Deploy Windows build to a release
#  deploy-windows:
#    name: Deploy Windows to Release
#    needs: build-windows
#    if: >-
#      success() &&
#      (
#        (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
#        (github.event_name == 'workflow_dispatch' && github.event.inputs.deployWindows == 'true')
#      )
#    runs-on: ubuntu-latest
#    permissions:
#      contents: write
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v4
#
#      - name: Download Windows Build
#        uses: actions/download-artifact@v4
#        with:
#          name: Build-Windows
#          path: windows-build
#
#      - name: Zip Windows Build
#        run: |
#          cd windows-build
#          zip -r ../DOTS-Horde-Architect-Windows.zip .
#
#      - name: Create Release
#        id: create_release
#        uses: softprops/action-gh-release@v1
#        with:
#          files: DOTS-Horde-Architect-Windows.zip
#          name: Release ${{ github.run_number }} - Windows
#          tag_name: v0.1.${{ github.run_number }}
#          draft: false
#          prerelease: false
#          generate_release_notes: true
#
#  # Build for WebGL - AFTER Windows build completes
#  build-webgl:
#    name: Build WebGL
#    needs: [verify-secrets, test, build-windows]
#    # Only run if WebGL build is enabled, tests pass (if running), and Windows build completes or is skipped
#    if: >-
#      needs.verify-secrets.outputs.buildWebGL == 'true' &&
#      (github.event.inputs.runTests != 'true' || needs.test.result == 'success') &&
#      (needs.build-windows.result == 'success' || needs.build-windows.result == 'skipped')
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#          lfs: true
#
#      # Free up disk space
#      - name: Free Disk Space
#        uses: jlumbroso/free-disk-space@main
#        with:
#          tool-cache: true
#          android: true
#          dotnet: true
#          haskell: true
#          large-packages: true
#          docker-images: true
#          swap-storage: true
#
#      # Display available disk space after cleanup
#      - name: Check Available Disk Space
#        run: |
#          echo "Available disk space:"
#          df -h
#
#      - name: Cache Library folder
#        uses: actions/cache@v3
#        with:
#          path: Library/Bee
#          key: Library-WebGL-minimal
#          restore-keys: Library-WebGL-minimal
#
#      - name: Build WebGL
#        uses: game-ci/unity-builder@v4
#        env:
#          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
#          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
#          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
#        with:
#          targetPlatform: WebGL
#          customParameters: '-nographics -batchmode -disable-gpu'
#
#      - name: Upload WebGL Build
#        uses: actions/upload-artifact@v4
#        with:
#          name: Build-WebGL
#          path: build/WebGL
#          retention-days: 3

  # Deploy WebGL build to GitHub Pages
  deploy-webgl:
    name: Deploy WebGL to GitHub Pages
    needs: build-webgl
    # Modified condition to include workflow_dispatch with deployWebGL input
    if: >-
      success() && 
      (
        (github.event_name == 'push' && github.ref == 'refs/heads/main') || 
        (github.event_name == 'workflow_dispatch' && github.event.inputs.deployWebGL == 'true')
      )
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download WebGL Build
        uses: actions/download-artifact@v4
        with:
          name: Build-WebGL
          path: webgl-build

      # Create index.html if it doesn't exist
      - name: Ensure index.html exists
        run: |
          if [ ! -f webgl-build/index.html ]; then
            echo "Creating a redirect index.html file"
            # Find the actual HTML file (usually index.html in a subfolder)
            MAIN_HTML=$(find webgl-build -name "*.html" | head -n 1)
            if [ -n "$MAIN_HTML" ]; then
              MAIN_HTML_RELATIVE=$(echo $MAIN_HTML | sed 's|webgl-build/||')
              echo "<meta http-equiv=\"refresh\" content=\"0; url=./${MAIN_HTML_RELATIVE}\">" > webgl-build/index.html
            else
              echo "<h1>DOTS-Horde-Architect</h1><p>WebGL build coming soon.</p>" > webgl-build/index.html
            fi
          fi

      # Setup Pages
      - name: Setup Pages
        uses: actions/configure-pages@v3

      # Upload artifact
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: 'webgl-build'

      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
